// adc_core_modular_adc_0.v

// This file was auto-generated from altera_modular_adc_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 23.1 991

`timescale 1 ps / 1 ps
module adc_core_modular_adc_0 #(
		parameter is_this_first_or_second_adc = 1
	) (
		input  wire        clock_clk,              //          clock.clk
		input  wire        reset_sink_reset_n,     //     reset_sink.reset_n
		input  wire        adc_pll_clock_clk,      //  adc_pll_clock.clk
		input  wire        adc_pll_locked_export,  // adc_pll_locked.export
		input  wire        command_valid,          //        command.valid
		input  wire [4:0]  command_channel,        //               .channel
		input  wire        command_startofpacket,  //               .startofpacket
		input  wire        command_endofpacket,    //               .endofpacket
		output wire        command_ready,          //               .ready
		output wire        response_valid,         //       response.valid
		output wire        response_startofpacket, //               .startofpacket
		output wire        response_endofpacket,   //               .endofpacket
		output wire [0:0]  response_empty,         //               .empty
		output wire [4:0]  response_channel,       //               .channel
		output wire [11:0] response_data           //               .data
	);

	wire         control_internal_response_valid;           // control_internal:rsp_valid -> avalon_st_adapter:in_0_valid
	wire  [11:0] control_internal_response_data;            // control_internal:rsp_data -> avalon_st_adapter:in_0_data
	wire   [4:0] control_internal_response_channel;         // control_internal:rsp_channel -> avalon_st_adapter:in_0_channel
	wire         control_internal_response_startofpacket;   // control_internal:rsp_sop -> avalon_st_adapter:in_0_startofpacket
	wire         control_internal_response_endofpacket;     // control_internal:rsp_eop -> avalon_st_adapter:in_0_endofpacket
	wire         avalon_st_adapter_out_0_valid;             // avalon_st_adapter:out_0_valid -> st_splitter_internal:in0_valid
	wire  [11:0] avalon_st_adapter_out_0_data;              // avalon_st_adapter:out_0_data -> st_splitter_internal:in0_data
	wire   [4:0] avalon_st_adapter_out_0_channel;           // avalon_st_adapter:out_0_channel -> st_splitter_internal:in0_channel
	wire         avalon_st_adapter_out_0_startofpacket;     // avalon_st_adapter:out_0_startofpacket -> st_splitter_internal:in0_startofpacket
	wire         avalon_st_adapter_out_0_endofpacket;       // avalon_st_adapter:out_0_endofpacket -> st_splitter_internal:in0_endofpacket
	wire         avalon_st_adapter_out_0_empty;             // avalon_st_adapter:out_0_empty -> st_splitter_internal:in0_empty
	wire         st_splitter_internal_out1_valid;           // st_splitter_internal:out1_valid -> avalon_st_adapter_001:in_0_valid
	wire  [11:0] st_splitter_internal_out1_data;            // st_splitter_internal:out1_data -> avalon_st_adapter_001:in_0_data
	wire   [4:0] st_splitter_internal_out1_channel;         // st_splitter_internal:out1_channel -> avalon_st_adapter_001:in_0_channel
	wire         st_splitter_internal_out1_startofpacket;   // st_splitter_internal:out1_startofpacket -> avalon_st_adapter_001:in_0_startofpacket
	wire         st_splitter_internal_out1_endofpacket;     // st_splitter_internal:out1_endofpacket -> avalon_st_adapter_001:in_0_endofpacket
	wire   [0:0] st_splitter_internal_out1_empty;           // st_splitter_internal:out1_empty -> avalon_st_adapter_001:in_0_empty
	wire         avalon_st_adapter_001_out_0_valid;         // avalon_st_adapter_001:out_0_valid -> adc_monitor_internal:adc_data_valid
	wire  [11:0] avalon_st_adapter_001_out_0_data;          // avalon_st_adapter_001:out_0_data -> adc_monitor_internal:adc_data_data
	wire   [4:0] avalon_st_adapter_001_out_0_channel;       // avalon_st_adapter_001:out_0_channel -> adc_monitor_internal:adc_data_channel
	wire         avalon_st_adapter_001_out_0_startofpacket; // avalon_st_adapter_001:out_0_startofpacket -> adc_monitor_internal:adc_data_startofpacket
	wire         avalon_st_adapter_001_out_0_endofpacket;   // avalon_st_adapter_001:out_0_endofpacket -> adc_monitor_internal:adc_data_endofpacket

	generate
		// If any of the display statements (or deliberately broken
		// instantiations) within this generate block triggers then this module
		// has been instantiated this module with a set of parameters different
		// from those it was generated for.  This will usually result in a
		// non-functioning system.
		if (is_this_first_or_second_adc != 1)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					is_this_first_or_second_adc_check ( .error(1'b1) );
		end
	endgenerate

	altera_modular_adc_control #(
		.clkdiv                          (2),
		.tsclkdiv                        (1),
		.tsclksel                        (1),
		.hard_pwd                        (0),
		.prescalar                       (0),
		.refsel                          (1),
		.device_partname_fivechar_prefix ("10M50"),
		.is_this_first_or_second_adc     (1),
		.analog_input_pin_mask           (65536),
		.dual_adc_mode                   (0),
		.enable_usr_sim                  (1),
		.reference_voltage_sim           (49648),
		.simfilename_ch0                 ("C:/Users/makar/apps/Shazam/adc-simulation-measurements.txt"),
		.simfilename_ch1                 (""),
		.simfilename_ch2                 (""),
		.simfilename_ch3                 (""),
		.simfilename_ch4                 (""),
		.simfilename_ch5                 (""),
		.simfilename_ch6                 (""),
		.simfilename_ch7                 (""),
		.simfilename_ch8                 (""),
		.simfilename_ch9                 (""),
		.simfilename_ch10                (""),
		.simfilename_ch11                (""),
		.simfilename_ch12                (""),
		.simfilename_ch13                (""),
		.simfilename_ch14                (""),
		.simfilename_ch15                (""),
		.simfilename_ch16                ("")
	) control_internal (
		.clk               (clock_clk),                               //         clock.clk
		.cmd_valid         (command_valid),                           //       command.valid
		.cmd_channel       (command_channel),                         //              .channel
		.cmd_sop           (command_startofpacket),                   //              .startofpacket
		.cmd_eop           (command_endofpacket),                     //              .endofpacket
		.cmd_ready         (command_ready),                           //              .ready
		.rst_n             (reset_sink_reset_n),                      //    reset_sink.reset_n
		.rsp_valid         (control_internal_response_valid),         //      response.valid
		.rsp_channel       (control_internal_response_channel),       //              .channel
		.rsp_data          (control_internal_response_data),          //              .data
		.rsp_sop           (control_internal_response_startofpacket), //              .startofpacket
		.rsp_eop           (control_internal_response_endofpacket),   //              .endofpacket
		.clk_in_pll_c0     (adc_pll_clock_clk),                       // adc_pll_clock.clk
		.clk_in_pll_locked (adc_pll_locked_export),                   //   conduit_end.export
		.sync_valid        (),                                        //   (terminated)
		.sync_ready        (1'b0)                                     //   (terminated)
	);

	adc_core_modular_adc_0_adc_monitor_internal #(
		.ADC_DATA_WIDTH        (12),
		.ADC_CHANNEL_WIDTH     (5),
		.CAPTURE_DATA_WIDTH    (8),
		.CONTROL_DATA_WIDTH    (32),
		.CONTROL_ADDRESS_WIDTH (5),
		.COUNT_WIDTH           (12)
	) adc_monitor_internal (
		.clk_clk                (clock_clk),                                 //      clk.clk
		.reset_reset            (~reset_sink_reset_n),                       //    reset.reset
		.adc_data_channel       (avalon_st_adapter_001_out_0_channel),       // adc_data.channel
		.adc_data_data          (avalon_st_adapter_001_out_0_data),          //         .data
		.adc_data_endofpacket   (avalon_st_adapter_001_out_0_endofpacket),   //         .endofpacket
		.adc_data_startofpacket (avalon_st_adapter_001_out_0_startofpacket), //         .startofpacket
		.adc_data_valid         (avalon_st_adapter_001_out_0_valid)          //         .valid
	);

	altera_avalon_st_splitter #(
		.NUMBER_OF_OUTPUTS (2),
		.QUALIFY_VALID_OUT (0),
		.USE_PACKETS       (1),
		.DATA_WIDTH        (12),
		.CHANNEL_WIDTH     (5),
		.ERROR_WIDTH       (1),
		.BITS_PER_SYMBOL   (12),
		.EMPTY_WIDTH       (1)
	) st_splitter_internal (
		.clk                 (clock_clk),                               //   clk.clk
		.reset               (~reset_sink_reset_n),                     // reset.reset
		.in0_valid           (avalon_st_adapter_out_0_valid),           //    in.valid
		.in0_startofpacket   (avalon_st_adapter_out_0_startofpacket),   //      .startofpacket
		.in0_endofpacket     (avalon_st_adapter_out_0_endofpacket),     //      .endofpacket
		.in0_empty           (avalon_st_adapter_out_0_empty),           //      .empty
		.in0_channel         (avalon_st_adapter_out_0_channel),         //      .channel
		.in0_data            (avalon_st_adapter_out_0_data),            //      .data
		.out0_valid          (response_valid),                          //  out0.valid
		.out0_startofpacket  (response_startofpacket),                  //      .startofpacket
		.out0_endofpacket    (response_endofpacket),                    //      .endofpacket
		.out0_empty          (response_empty),                          //      .empty
		.out0_channel        (response_channel),                        //      .channel
		.out0_data           (response_data),                           //      .data
		.out1_valid          (st_splitter_internal_out1_valid),         //  out1.valid
		.out1_startofpacket  (st_splitter_internal_out1_startofpacket), //      .startofpacket
		.out1_endofpacket    (st_splitter_internal_out1_endofpacket),   //      .endofpacket
		.out1_empty          (st_splitter_internal_out1_empty),         //      .empty
		.out1_channel        (st_splitter_internal_out1_channel),       //      .channel
		.out1_data           (st_splitter_internal_out1_data),          //      .data
		.in0_ready           (),                                        // (terminated)
		.in0_error           (1'b0),                                    // (terminated)
		.out0_ready          (1'b1),                                    // (terminated)
		.out0_error          (),                                        // (terminated)
		.out1_ready          (1'b1),                                    // (terminated)
		.out1_error          (),                                        // (terminated)
		.out2_ready          (1'b1),                                    // (terminated)
		.out2_valid          (),                                        // (terminated)
		.out2_startofpacket  (),                                        // (terminated)
		.out2_endofpacket    (),                                        // (terminated)
		.out2_empty          (),                                        // (terminated)
		.out2_channel        (),                                        // (terminated)
		.out2_error          (),                                        // (terminated)
		.out2_data           (),                                        // (terminated)
		.out3_ready          (1'b1),                                    // (terminated)
		.out3_valid          (),                                        // (terminated)
		.out3_startofpacket  (),                                        // (terminated)
		.out3_endofpacket    (),                                        // (terminated)
		.out3_empty          (),                                        // (terminated)
		.out3_channel        (),                                        // (terminated)
		.out3_error          (),                                        // (terminated)
		.out3_data           (),                                        // (terminated)
		.out4_ready          (1'b1),                                    // (terminated)
		.out4_valid          (),                                        // (terminated)
		.out4_startofpacket  (),                                        // (terminated)
		.out4_endofpacket    (),                                        // (terminated)
		.out4_empty          (),                                        // (terminated)
		.out4_channel        (),                                        // (terminated)
		.out4_error          (),                                        // (terminated)
		.out4_data           (),                                        // (terminated)
		.out5_ready          (1'b1),                                    // (terminated)
		.out5_valid          (),                                        // (terminated)
		.out5_startofpacket  (),                                        // (terminated)
		.out5_endofpacket    (),                                        // (terminated)
		.out5_empty          (),                                        // (terminated)
		.out5_channel        (),                                        // (terminated)
		.out5_error          (),                                        // (terminated)
		.out5_data           (),                                        // (terminated)
		.out6_ready          (1'b1),                                    // (terminated)
		.out6_valid          (),                                        // (terminated)
		.out6_startofpacket  (),                                        // (terminated)
		.out6_endofpacket    (),                                        // (terminated)
		.out6_empty          (),                                        // (terminated)
		.out6_channel        (),                                        // (terminated)
		.out6_error          (),                                        // (terminated)
		.out6_data           (),                                        // (terminated)
		.out7_ready          (1'b1),                                    // (terminated)
		.out7_valid          (),                                        // (terminated)
		.out7_startofpacket  (),                                        // (terminated)
		.out7_endofpacket    (),                                        // (terminated)
		.out7_empty          (),                                        // (terminated)
		.out7_channel        (),                                        // (terminated)
		.out7_error          (),                                        // (terminated)
		.out7_data           (),                                        // (terminated)
		.out8_ready          (1'b1),                                    // (terminated)
		.out8_valid          (),                                        // (terminated)
		.out8_startofpacket  (),                                        // (terminated)
		.out8_endofpacket    (),                                        // (terminated)
		.out8_empty          (),                                        // (terminated)
		.out8_channel        (),                                        // (terminated)
		.out8_error          (),                                        // (terminated)
		.out8_data           (),                                        // (terminated)
		.out9_ready          (1'b1),                                    // (terminated)
		.out9_valid          (),                                        // (terminated)
		.out9_startofpacket  (),                                        // (terminated)
		.out9_endofpacket    (),                                        // (terminated)
		.out9_empty          (),                                        // (terminated)
		.out9_channel        (),                                        // (terminated)
		.out9_error          (),                                        // (terminated)
		.out9_data           (),                                        // (terminated)
		.out10_ready         (1'b1),                                    // (terminated)
		.out10_valid         (),                                        // (terminated)
		.out10_startofpacket (),                                        // (terminated)
		.out10_endofpacket   (),                                        // (terminated)
		.out10_empty         (),                                        // (terminated)
		.out10_channel       (),                                        // (terminated)
		.out10_error         (),                                        // (terminated)
		.out10_data          (),                                        // (terminated)
		.out11_ready         (1'b1),                                    // (terminated)
		.out11_valid         (),                                        // (terminated)
		.out11_startofpacket (),                                        // (terminated)
		.out11_endofpacket   (),                                        // (terminated)
		.out11_empty         (),                                        // (terminated)
		.out11_channel       (),                                        // (terminated)
		.out11_error         (),                                        // (terminated)
		.out11_data          (),                                        // (terminated)
		.out12_ready         (1'b1),                                    // (terminated)
		.out12_valid         (),                                        // (terminated)
		.out12_startofpacket (),                                        // (terminated)
		.out12_endofpacket   (),                                        // (terminated)
		.out12_empty         (),                                        // (terminated)
		.out12_channel       (),                                        // (terminated)
		.out12_error         (),                                        // (terminated)
		.out12_data          (),                                        // (terminated)
		.out13_ready         (1'b1),                                    // (terminated)
		.out13_valid         (),                                        // (terminated)
		.out13_startofpacket (),                                        // (terminated)
		.out13_endofpacket   (),                                        // (terminated)
		.out13_empty         (),                                        // (terminated)
		.out13_channel       (),                                        // (terminated)
		.out13_error         (),                                        // (terminated)
		.out13_data          (),                                        // (terminated)
		.out14_ready         (1'b1),                                    // (terminated)
		.out14_valid         (),                                        // (terminated)
		.out14_startofpacket (),                                        // (terminated)
		.out14_endofpacket   (),                                        // (terminated)
		.out14_empty         (),                                        // (terminated)
		.out14_channel       (),                                        // (terminated)
		.out14_error         (),                                        // (terminated)
		.out14_data          (),                                        // (terminated)
		.out15_ready         (1'b1),                                    // (terminated)
		.out15_valid         (),                                        // (terminated)
		.out15_startofpacket (),                                        // (terminated)
		.out15_endofpacket   (),                                        // (terminated)
		.out15_empty         (),                                        // (terminated)
		.out15_channel       (),                                        // (terminated)
		.out15_error         (),                                        // (terminated)
		.out15_data          ()                                         // (terminated)
	);

	adc_core_modular_adc_0_avalon_st_adapter #(
		.inBitsPerSymbol (12),
		.inUsePackets    (1),
		.inDataWidth     (12),
		.inChannelWidth  (5),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (0),
		.inReadyLatency  (0),
		.outDataWidth    (12),
		.outChannelWidth (5),
		.outErrorWidth   (0),
		.outUseEmptyPort (1),
		.outUseValid     (1),
		.outUseReady     (0),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk        (clock_clk),                               // in_clk_0.clk
		.in_rst_0_reset      (~reset_sink_reset_n),                     // in_rst_0.reset
		.in_0_data           (control_internal_response_data),          //     in_0.data
		.in_0_valid          (control_internal_response_valid),         //         .valid
		.in_0_startofpacket  (control_internal_response_startofpacket), //         .startofpacket
		.in_0_endofpacket    (control_internal_response_endofpacket),   //         .endofpacket
		.in_0_channel        (control_internal_response_channel),       //         .channel
		.out_0_data          (avalon_st_adapter_out_0_data),            //    out_0.data
		.out_0_valid         (avalon_st_adapter_out_0_valid),           //         .valid
		.out_0_startofpacket (avalon_st_adapter_out_0_startofpacket),   //         .startofpacket
		.out_0_endofpacket   (avalon_st_adapter_out_0_endofpacket),     //         .endofpacket
		.out_0_empty         (avalon_st_adapter_out_0_empty),           //         .empty
		.out_0_channel       (avalon_st_adapter_out_0_channel)          //         .channel
	);

	adc_core_modular_adc_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (12),
		.inUsePackets    (1),
		.inDataWidth     (12),
		.inChannelWidth  (5),
		.inErrorWidth    (0),
		.inUseEmptyPort  (1),
		.inUseValid      (1),
		.inUseReady      (0),
		.inReadyLatency  (0),
		.outDataWidth    (12),
		.outChannelWidth (5),
		.outErrorWidth   (0),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (0),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk        (clock_clk),                                 // in_clk_0.clk
		.in_rst_0_reset      (~reset_sink_reset_n),                       // in_rst_0.reset
		.in_0_data           (st_splitter_internal_out1_data),            //     in_0.data
		.in_0_valid          (st_splitter_internal_out1_valid),           //         .valid
		.in_0_startofpacket  (st_splitter_internal_out1_startofpacket),   //         .startofpacket
		.in_0_endofpacket    (st_splitter_internal_out1_endofpacket),     //         .endofpacket
		.in_0_empty          (st_splitter_internal_out1_empty),           //         .empty
		.in_0_channel        (st_splitter_internal_out1_channel),         //         .channel
		.out_0_data          (avalon_st_adapter_001_out_0_data),          //    out_0.data
		.out_0_valid         (avalon_st_adapter_001_out_0_valid),         //         .valid
		.out_0_startofpacket (avalon_st_adapter_001_out_0_startofpacket), //         .startofpacket
		.out_0_endofpacket   (avalon_st_adapter_001_out_0_endofpacket),   //         .endofpacket
		.out_0_channel       (avalon_st_adapter_001_out_0_channel)        //         .channel
	);

endmodule
